{"componentChunkName":"component---src-templates-blog-post-js","path":"/HTTP/http_get_method_with_request_body/","result":{"data":{"site":{"siteMetadata":{"title":"춘이코드","author":"chunnycode","siteUrl":"https://chunnycode.github.io","comment":{"disqusShortName":"","utterances":"chunnycode/chunnycode.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"4b4d1ebc-6caa-5fa1-bb3f-86afa9137a05","excerpt":"일반적으로는 HTTP GET Method를 사용할 때는 Path Parameter나 Query Parameter 방식으로 데이터를 전송한다. 그런데 GET Method에  를 붙여서 보낼 수도 있다. GET 방식에는 Message Body가 없다고도 읽었는데 오늘 일하다가 GET Body에 Json 넣어서 통신했다. 🙄 API 서버를 개발 중, 동료가 만든 API를 테스트하는데 동료는 정상적으로 된다는데 나는 아무리해도 안 되었다. 요청을 어떻게 보냈냐고 물어봤더니 Get에 Body…","html":"<h3 id=\"일반적으로는\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94\" aria-label=\"일반적으로는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적으로는</h3>\n<blockquote>\n<p>HTTP GET Method를 사용할 때는<br>\nPath Parameter나 Query Parameter 방식으로 데이터를 전송한다.</p>\n</blockquote>\n<h3 id=\"그런데\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%B0%EB%8D%B0\" aria-label=\"그런데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그런데</h3>\n<blockquote>\n<p>GET Method에 <code class=\"language-text\">Body</code> 를 붙여서 보낼 수도 있다.</p>\n</blockquote>\n<p><del>GET 방식에는 Message Body가 없다고도 읽었는데</del><br>\n오늘 일하다가 GET Body에 Json 넣어서 통신했다. 🙄<br>\nAPI 서버를 개발 중, 동료가 만든 API를 테스트하는데 동료는 정상적으로 된다는데 나는 아무리해도 안 되었다. 요청을 어떻게 보냈냐고 물어봤더니 Get에 Body를 설정해서 보내고 있었고\nBody를 붙여 보내면 Spring GetMapping에서 RequestBody로 받아낼 수 있었다. 의도한 것은 아니고 우연이었던 것 같은데,\n찾아보니 이런 경우는 엘라스틱서치 등에서 사용하는 것을 볼 수 있다고도 한다.</p>\n<p>HTTP를 처음 접하고부터 Rest API 설계를 할 때도 get에 Body를 보내는 것은 한 번도 고려한 적도 없었고 보지도 못했다.\nget메소드를 사용할 때 했던 고민은 Restful한 설계를 고려하며 path parameter, query string을 어떻게 적절하게 사용할지였다.\n그래서 될줄 몰랐다.</p>\n<h3 id=\"된다\" style=\"position:relative;\"><a href=\"#%EB%90%9C%EB%8B%A4\" aria-label=\"된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>된다.</h3>\n<blockquote>\n<p>그런데 <code class=\"language-text\">그렇게 쓰는 것에 대한 판단</code>을 어떻게 해야할까?</p>\n</blockquote>\n<p>이게 된다고 해서 사용을 해도 될까?  </p>\n<p>가장 괜찮은 관점에서 정리된것 같은 <a href=\"https://brunch.co.kr/@kd4/158\">문서</a> 를 첨부한다.</p>\n<p><em>간단히 요약하면</em></p>\n<ol>\n<li>2014년 이후 나온 RFC스펙(RFC 7230-7237) 을 근거로 하여 무리가 없어보인다.</li>\n<li>\n<p>하지만 주의할 점이 있다.</p>\n<ul>\n<li>캐싱, 프록시 설계 시 GET의 Body를 참조하지 않는 경우  </li>\n<li>RESTFul이 강조하는 의미론에는 안맞아..</li>\n<li>지원하지 않는 Client가 존재할 수 있다.. 복병주의 ex) Spring RestTemplate</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"rfc-request-for-comments\" style=\"position:relative;\"><a href=\"#rfc-request-for-comments\" aria-label=\"rfc request for comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*RFC (Request For Comments)</h4>\n<p>미국의 국제 인터넷 표준화 기구 <code class=\"language-text\">IETF(Internet Engineering Task Force)</code>에서 관리하는 문서이다.\n<a href=\"https://net-study.club/entry/RFC-Request-for-Comments%EB%9E%80-RFC%EC%9D%98-%EC%97%AD%EC%82%AC-RFC-%EC%A2%85%EB%A5%98-RFC-%ED%91%9C%EC%A4%80%ED%99%94-%EC%A0%88%EC%B0%A8\">참고문서</a></p>\n<p>표준화를 근거로 판단하는 것은 좋은 기준인것 같다.<br>\n<del>본문을 조회하였는데 아직 이해는 잘..</del><br>\n친절하게 설명해준 문서를 힘입어 아래의 정보를 간단히 요약해둔다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<blockquote>\n<p><strong>설계에 따라</strong> 달라지는 부분으로<br>\n큰 무리는 없지만 <strong>주의할점</strong>은 있으며<br>\n조회 조건이 길어질경우 <strong>사용을 고려해 볼 수 있다</strong>고 하겠다.</p>\n</blockquote>\n<p>개인적으로는 반드시 사용해야 하는 특수한 상황이 아니라면 <span style=\"color:orange\"><em>사용을 고려하지는 않을 것</em> </span>같다.\n일하면서 배운 생소한 것이어서 정리해보았다.</p>\n<p><a href=\"https://if1live.github.io/posts/http-get-request-with-body-and-http-library/\">기타 참고 문서</a></p>","frontmatter":{"title":"HTTP GET Method에 Body를 붙여 보낼 수 있다","date":"March 11, 2022"}}},"pageContext":{"slug":"/HTTP/http_get_method_with_request_body/","previous":{"fields":{"slug":"/생각/wanna_be/"},"frontmatter":{"title":"어떤 개발자가 되고싶은가"}},"next":{"fields":{"slug":"/git/change_commit_author/"},"frontmatter":{"title":"이전 commit의 author 변경"}}}}}